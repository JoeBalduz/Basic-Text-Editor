/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basic.text.editor;

import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Chao5
 */
public class MainFrame extends javax.swing.JFrame {
    File file = null;
    Clipboard clipboard = getToolkit().getSystemClipboard();
    int sizeOfFont = 13;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("text files", "txt", "text");
        fileOpen.setFileFilter(filter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileOpen = new javax.swing.JFileChooser();
        fileSave = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        format = new javax.swing.JMenu();
        fontSize = new javax.swing.JMenuItem();
        bold = new javax.swing.JCheckBoxMenuItem();
        italic = new javax.swing.JCheckBoxMenuItem();

        fileSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileSave.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Joe's Text Editor");

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(textArea);

        jMenu1.setText("File");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        jMenu1.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jMenu1.add(openFile);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        saveAs.setText("Save As");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        jMenu1.add(saveAs);

        jMenuBar1.add(jMenu1);

        edit.setText("Edit");

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        edit.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        edit.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        edit.add(paste);

        jMenuBar1.add(edit);

        format.setText("Format");

        fontSize.setText("Font Size");
        fontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeActionPerformed(evt);
            }
        });
        format.add(fontSize);

        bold.setSelected(false);
        bold.setText("Bold");
        bold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldActionPerformed(evt);
            }
        });
        format.add(bold);

        italic.setSelected(false);
        italic.setText("Italic");
        italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicActionPerformed(evt);
            }
        });
        format.add(italic);

        jMenuBar1.add(format);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

//Used to save a file
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        if(file == null){
            int status;
            
            status = fileSave.showOpenDialog(rootPane);
            
            if(status == JFileChooser.APPROVE_OPTION){
                String fileName;
                
                fileName = JOptionPane.showInputDialog("File Name", ".txt");
                
                if(!fileName.contains(".txt"))
                    fileName += ".txt";
                
                File newFile = new File(fileSave.getSelectedFile() + "\\" + fileName);
                
                if(newFile.exists()){
                    JOptionPane.showMessageDialog(rootPane, "File already exists.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else{
                    try {
                        newFile.createNewFile();
                        
                        PrintWriter printWriter = new PrintWriter(newFile);
                        
                        printWriter.write(textArea.getText());
                        printWriter.close(); 
                        
                        file = newFile;
                        
                        JOptionPane.showMessageDialog(rootPane, "File saved.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Error while saving file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            try {
                PrintWriter printWriter = new PrintWriter(file);
                printWriter.write(textArea.getText());
                printWriter.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveActionPerformed

//Used to open a file
    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        int status;
        
        status = fileOpen.showOpenDialog(rootPane);
        
        if(status == JFileChooser.APPROVE_OPTION){
            file = fileOpen.getSelectedFile();
            
            try {
                String buffer = "";
                
                Scanner scan = new Scanner(new FileInputStream(file));
                
                while(scan.hasNext()){
                    buffer += scan.nextLine() + "\n";
                }
                
                textArea.setText(buffer);
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openFileActionPerformed

//Used to save a file as a new file
    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed

        int status;
            
        status = fileSave.showOpenDialog(rootPane);
            
        if(status == JFileChooser.APPROVE_OPTION){
            String fileName;
                
            fileName = JOptionPane.showInputDialog("File Name", ".txt");
                
            //Adds .txt to the end of a file name if it is not added by the user
            if(!fileName.contains(".txt"))
                fileName += ".txt";
                
            File newFile = new File(fileSave.getSelectedFile() + "\\" + fileName);
                
            if(newFile.exists()){
                JOptionPane.showMessageDialog(rootPane, "File already exists.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else{
                try {
                    newFile.createNewFile();
                        
                    PrintWriter printWriter = new PrintWriter(newFile);
                        
                    printWriter.write(textArea.getText());
                    printWriter.close();
                    
                    file = newFile;
                        
                    JOptionPane.showMessageDialog(rootPane, "File saved.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Error while saving file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_saveAsActionPerformed

//Creates a new file
    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        int option;
        
        //Saves changes if it is a new file
        if(file == null && !textArea.getText().equals("")){
            option = JOptionPane.showConfirmDialog(rootPane, "Would you like to save changes?", "Save Changes", JOptionPane.YES_NO_CANCEL_OPTION);
            if(option == 0)
                saveAsActionPerformed(evt);
            else if(option == 2)
                return;
        }
        //Saves changes to exisitng file
        else if(file != null){
            option = JOptionPane.showConfirmDialog(rootPane, "Would you like to save changes?", "Save Changes", JOptionPane.YES_NO_CANCEL_OPTION);
            if(option == 0)
                saveActionPerformed(evt);
            else if(option == 2)
                return;
        }
        file = null;
        
        textArea.setText(null);
    }//GEN-LAST:event_newFileActionPerformed

//Cuts text from the file and puts it on the clipboard
    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        String cutString = textArea.getSelectedText();
        StringSelection stringSelection = new StringSelection(cutString);
        clipboard.setContents(stringSelection, stringSelection);
        textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd());       
    }//GEN-LAST:event_cutActionPerformed

//Copies text from the file and puts it on the clipboard
    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        String copyString = textArea.getSelectedText();
        StringSelection stringSelection = new StringSelection(copyString);
        clipboard.setContents(stringSelection, stringSelection);
    }//GEN-LAST:event_copyActionPerformed

//Pastes text from the clipboard
    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        Transferable pasteText = clipboard.getContents(MainFrame.this);
        try {
            String selected = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceRange(selected, textArea.getSelectionStart(), textArea.getSelectionEnd());
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pasteActionPerformed

//Changes the font size of the text
    private void fontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeActionPerformed
        String input;
        int number;
        input = JOptionPane.showInputDialog("Enter in a font size between 3 and 72");
        try{
            number = Integer.parseInt(input);
            if(number < 3)
                JOptionPane.showMessageDialog(rootPane, "The number entered is too small.", "Error", JOptionPane.ERROR_MESSAGE);
            else if(number > 72)
                JOptionPane.showMessageDialog(rootPane, "The number entered is too large.", "Error", JOptionPane.ERROR_MESSAGE);
            else{
                sizeOfFont = number;
                textArea.setFont(new java.awt.Font("Monospaced", 0, sizeOfFont));
            }
        }
        catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(rootPane,"Only numbers are accepted.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_fontSizeActionPerformed

//Bold is selected
    private void boldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldActionPerformed
        change();
    }//GEN-LAST:event_boldActionPerformed

//Italic is selected
    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
        change();
    }//GEN-LAST:event_italicActionPerformed

//Changes the font style
private void change(){
    if(bold.isSelected() && italic.isSelected())
        textArea.setFont(new java.awt.Font("Monospaced", 3, sizeOfFont));
    else if(bold.isSelected())
        textArea.setFont(new java.awt.Font("Monospaced", 1, sizeOfFont));
    else if(italic.isSelected())
        textArea.setFont(new java.awt.Font("Monospaced", 2, sizeOfFont));
    else
        textArea.setFont(new java.awt.Font("Monospaced", 0, sizeOfFont)); 
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem bold;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenu edit;
    private javax.swing.JFileChooser fileOpen;
    private javax.swing.JFileChooser fileSave;
    private javax.swing.JMenuItem fontSize;
    private javax.swing.JMenu format;
    private javax.swing.JCheckBoxMenuItem italic;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
